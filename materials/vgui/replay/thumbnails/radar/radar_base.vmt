//Radar vmt by Village Green Preserver, https://github.com/VillageGreenPreserver/tf2-hud-radar
//modified from https://github.com/gliptal2/tf2-hud-radar

"UnlitGeneric"
{
	"$basetexture"		"vgui/replay/thumbnails/radar/pl_upward"
	"$translucent"		"1"
	"$vertexcolor"		"1"
	"$vertexalpha"		"1"

	//change radar shape
	//"$detail"			"vgui/replay/thumbnails/radar/mask"
	//"$detailscale"		"1"
	//"$detailblendmode"	"9"


	//variables for storing numbers, because proxies can't just use numbers for some reason
	"$minusone"			"-1"
	"$zero"				"0"
	"$one"				"1"
	"$two"				"2"
	"$three"			"3"
	"$four"				"4"
	
	"$pos"				"[0.0 0.0 0.0]" //raw position data
	"$posX"				"0.0"
	"$posY"				"0.0"
	"$posZ"				"0.0"
	"$finalpos"			"[0.0 0.0]" //position data after all calculations
	
	"$totalX"			"7175" //scale the image so the distances line up, the higher the value, the less the image moves
	"$totalY"			"14350" //seperate value for y axis if using a non-square vtf

	"$offsetX"			"6000" //offset the image, not needed if you take your screenshots at coordinates 0, 0
	"$offsetY"			"-1350"

	"$rotate"			"-90" //rotate radar image

	"$layer1"			"30" //zpos at which to change layer
	"$layer2"			"250"
	"$layer3"			"250"
	"$layer4"			"250"

	"$speed"			"0"
	"$speedScale"		"1000" //how much to zoom out

	"$scale"				"[0.15 0.3]" //minimum zoom level
	"$zoomX"			"0.0"
	"$zoomY"			"0.0"
	"$zoomFinal"		"[0.0 0.0]"

	Proxies {

		//===== Position =====

		//get player position data
		PlayerPosition
		{
			scale			"1"
			resultVar		"$pos"
		}

		//extract x value and store in $posX
		Clamp
		{
			srcVar1			"$zero"
			min				"$pos[0]"
			max				"$pos[0]"
			resultVar		"$posX"
		}

		//extract y value and store in $posY
		Clamp
		{
			srcVar1			"$zero"
			min				"$pos[1]"
			max				"$pos[1]"
			resultVar		"$posY"
		}

		//offset x value
		Add
		{
			srcVar1			"$posX"
			srcVar2			"$offsetX"
			resultVar		"$posX"
		}

		//offset y value
		Add
		{
			srcVar1			"$posY"
			srcVar2			"$offsetY"
			resultVar		"$posY"
		}

		//scale x value
		Divide
		{
			srcVar1			"$posX"
			srcVar2			"$totalX"
			resultVar		"$posX"
		}

		//scale y value
		Divide
		{
			srcVar1			"$posY"
			srcVar2			"$totalY"
			resultVar		"$posY"
		}

		//invert y value
		Multiply
		{
			srcVar1			"$posY"
			srcVar2			"$minusone"
			resultVar		"$posY"
		}

		//store x in array
		Equals
		{
			srcVar1			"$posX"
			resultVar		"$finalpos[0]"
		}

		//store y in array
		Equals
		{
			srcVar1			"$posY"
			resultVar		"$finalpos[1]"
		}

		//===== Zoom =====

		//extract player speed data
		PlayerSpeed
		{
			scale			"1"
			resultVar		"$speed"
		}

		//scale the value down
		Divide
		{
			srcVar1			"$speed"
			srcVar2			"$speedScale"
			resultVar		"$speed"
		}

		//shift value so the range is >1
		Add
		{
			srcVar1			"$speed"
			srcVar2			"$one"
			resultVar		"$speed"
		}

		//extract x value and store in $zoomX
		Clamp
		{
			srcVar1			"$zero"
			min				"$scale[0]"
			max				"$scale[0]"
			resultVar		"$zoomX"
		}

		//extract y value and store in $zoomY
		Clamp
		{
			srcVar1			"$zero"
			min				"$scale[1]"
			max				"$scale[1]"
			resultVar		"$zoomY"
		}

		//multiply zoom with speed
		Multiply
		{
			srcVar1			"$zoomX"
			srcVar2			"$speed"
			resultVar		"$zoomX"
		}

		Multiply
		{
			srcVar1			"$zoomY"
			srcVar2			"$speed"
			resultVar		"$zoomY"
		}
		
		//store zoom values
		Equals
		{
			srcVar1			"$zoomX"
			resultVar		"$zoomFinal[0]"
		}

		Equals
		{
			srcVar1			"$zoomY"
			resultVar		"$zoomFinal[1]"
		}

		//apply changes
		TextureTransform
		{
			translateVar	"$finalpos"
			scaleVar		"$zoomFinal"
			rotatevar		"$rotate"
			resultVar		"$basetexturetransform"
		}

		//===== Layer =====

		//extract z value and store in $posz
		Clamp
		{
			srcVar1			"$zero"
			min				"$pos[2]"
			max				"$pos[2]"
			resultVar		"$posZ"
		}

		//if $posZ > $layer1, $frame = 1, else $frame = 0
		LessOrEqual
		{
			lessEqualVar	"$zero"
			greaterVar		"$one"
			srcVar1			"$posZ"
			srcVar2			"$layer1"
			resultVar		"$frame"
		}

		//if $posZ > $layer2, $frame = 2, else $frame = $frame
		LessOrEqual
		{
			lessEqualVar	"$frame"
			greaterVar		"$two"
			srcVar1			"$posZ"
			srcVar2			"$layer2"
			resultVar		"$frame"
		}

		// etc.
		LessOrEqual
		{
			lessEqualVar	"$frame"
			greaterVar		"$three"
			srcVar1			"$posZ"
			srcVar2			"$layer3"
			resultVar		"$frame"
		}

		// etc.
		LessOrEqual
		{
			lessEqualVar	"$frame"
			greaterVar		"$four"
			srcVar1			"$posZ"
			srcVar2			"$layer4"
			resultVar		"$frame"
		}
	}
}